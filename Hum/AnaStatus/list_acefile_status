#!/usr/local/bin/perl -w
use strict;
use Carp;
use Hum::AnaStatus::Sequence;
use Hum::AnaStatus::SequenceSet;
use Hum::AnaStatus::AceFile;
use Hum::Submission 'acetime', 'prepare_statement';
use Getopt::Long 'GetOptions';
{
    my ( @tasks_raw, $chr_set, $list );
    GetOptions(
        'task=s' => \@tasks_raw,
        'set=s'  => \$chr_set,
        'list'   => \$list
    );
    if ( @ARGV || $chr_set ) {

        my %task_status_dict;
        my $sth = prepare_statement( q{
                SELECT task_name
                FROM ana_task
				WHERE is_active = 'Y'
                }
        );

        $sth->execute;

        while ( my ($task_status_dict) = $sth->fetchrow ) {
            $task_status_dict{$task_status_dict} = $task_status_dict;
        }

        my %wanted_task;

        if (@tasks_raw) {

            my @tasks = map split ( /,/, $_ ), @tasks_raw;
            %wanted_task = map { $_ => 1 } @tasks;

        }
        else {

            %wanted_task = %task_status_dict;

        }

        foreach ( keys %wanted_task ) {

            die "\n", $_,
" Is Not A Valid Task..........  use '-list' for list of valid tasks\n"
              unless $task_status_dict{$_};

        }

        if ( $chr_set && $ARGV[0] ) { die "can't have Sequence with Set" }

        if ($list) {

            foreach my $key ( keys %task_status_dict ) {
                print $key, "\n";
            }
        }

        if ($chr_set) {
            my $set =
              Hum::AnaStatus::SequenceSet->new_from_set_name($chr_set);    #Sequence Object

            foreach my $hum_sequence ( $set->sequence_list ) {

                list_acefile_attribs( \%wanted_task, $hum_sequence );

            }

        }
        else {

            foreach my $sequence (@ARGV) {

                my $hum_sequence =
                  Hum::AnaStatus::Sequence->new_from_sequence_name($sequence);    #SequenceSet Object
                list_acefile_attribs( \%wanted_task, $hum_sequence );

            }
        }
    }

    else { die "no set or sequence" }

}

sub list_acefile_attribs {
    my ( $wanted_task, $hum_sequence ) = @_;
    print "\n", $hum_sequence->sequence_name, "\n";

    foreach my $acefile ( $hum_sequence->get_all_AceFiles ) {   #Acefile Objects

        my $time_str = acetime( $acefile->creation_time );
        my $name     = $acefile->task_name;
        if ( $wanted_task->{$name} ) {
            printf "%-22s%-15s%-10s%s\n", $acefile->acefile_name,
              $acefile->task_name, $acefile->acefile_status_id_name, $time_str;
        }

    }

}
